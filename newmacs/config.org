#+AUTHOR: Jonathan Merritt
#+TITLE: GNU Emacs Configuration

* Packages
** Package Sources

Set the package sources so that I can load packages.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

** use-package

To be able to manage its configuration with =use-package= it is necessary to
first install it.

#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (use-package use-package-ensure-system-package :ensure t)
#+END_SRC

* Better Defaults

Initially, I set some defaults for emacs that I prefer:

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq
    inhibit-startup-screen t
    initial-scratch-message ""
    fill-column 80
    vc-follow-symlinks t
    mac-command-modifier 'meta)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (column-number-mode 1)
#+END_SRC

* Evil and Evil Collection

=evil= is a vim emulation layer for emacs, and =evil-collection= is a
collection of additional packages for things that the original evil
bindings missed.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+END_SRC

* Evil Goggles

=evil-googles= provides a visual hint to =evil= operations such as yank,
delete, paste, etc.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-goggles 
    :ensure t 
    :after evil
    :config
    (evil-goggles-mode))
#+END_SRC

* Theme

I use =doom-themes=, the theme set from doom emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-themes :ensure t)
  (load-theme 'doom-nord-light t) 
#+END_SRC

* Font

Set the font.

#+BEGIN_SRC emacs-lisp :tangle yes
  (set-face-attribute 'default nil
    :height 130)
#+END_SRC

* Modeline

Using =doom-modeline=. This also requires =all-the-icons=, with its
command =M-x all-the-icons-install-fonts=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons :ensure t)
  (use-package doom-modeline :ensure t :init (doom-modeline-init))
#+END_SRC

* General Key Definitions

I use =general= to do additional key bindings.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package general
    :ensure t
    :after evil)
  (general-define-key
    :states '(normal motion)
    :keymaps '(normal emacs override)
    :prefix "SPC"
    "."  'find-file
    ;; Buffer
    "b" '(:ignore t :which-key "buffer")
    "bk" 'kill-current-buffer
    ;; Git
    "g" '(:ignore t :which-key "git")
    "gg" 'magit-status
    ;; Window
    "w" '(:ignore t :which-key "window")
    "wh" 'evil-window-left
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wl" 'evil-window-right
    "wq" 'evil-quit
    )
  ;; Use C-j and C-k to navigate the Ivy minibuffer
  (general-define-key
    :keymaps '(normal ivy-minibuffer-map)
    "C-j" 'ivy-next-line
    "C-k" 'ivy-previous-line)
#+END_SRC

I also use =which-key= to display the keys, since I tend to forget
them.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :after general
    :config (which-key-mode))
#+END_SRC

* Ivy

=ivy= is a general completion mechanism.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :ensure t
    :after evil
    :defer 0.1
    :config (ivy-mode))
#+END_SRC

I use =ivy-posframe= to use the posframe buffer to show Ivy
suggestions.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy-posframe
    :ensure t
    :init
    (setq ivy-display-function #'ivy-posframe-display-at-window-center)
    (setq ivy-posframe-parameters
      '((left-fringe . 10)
        (right-fringe . 10)))
    :config
    (ivy-posframe-enable))
#+END_SRC

* Projectile

=projectile= is a project tool.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile 
    :ensure t
    :after evil)
#+END_SRC

* Magit

=magit= is a =git= porcelain inside emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :ensure t)
#+END_SRC

I also use =evil-magit= to add evil key bindings.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-magit
    :ensure t
    :after (evil magit)
    :init
    (setq evil-magit-state 'normal)
    :config
    (require 'evil-magit))
#+END_SRC

* Languages
** Haskell

I use =haskell-mode= only.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package haskell-mode
    :ensure t)
#+END_SRC
